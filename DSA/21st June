####Minimize Size Subarray Sum

class Solution {
public:
    int minSubArrayLen(int target, vector<int>& nums) {
        int n = nums.size();
        int minLen = n + 1;
        int sum = 0;
        int left = 0;
        
        for (int right = 0; right < n; ++right) {
            sum += nums[right];
            while (sum >= target) {
                minLen = min(minLen, right - left + 1);
                sum -= nums[left++];
            }
        }
        return (minLen <= n) ? minLen : 0;
    }
};

####Majority Element II
class Solution {
public:
    vector<int> majorityElement(vector<int>& nums) {
        int n = nums.size();
        int candidate1 = -1, candidate2 = -1;
        int count1 = 0, count2 = 0;
        
        for (int num : nums) {
            if (num == candidate1) {
                count1++;
            } else if (num == candidate2) {
                count2++;
            } else if (count1 == 0) {
                candidate1 = num;
                count1 = 1;
            } else if (count2 == 0) {
                candidate2 = num;
                count2 = 1;
            } else {
                count1--;
                count2--;
            }
        }
        
        count1 = count2 = 0;
        for (int num : nums) {
            if (num == candidate1) count1++;
            else if (num == candidate2) count2++;
        }
        
        vector<int> res;
        if (count1 > n / 3) res.push_back(candidate1);
        if (count2 > n / 3) res.push_back(candidate2);
        return res;
    }
};



####Next Permutation

class Solution {
public:
    void nextPermutation(vector<int>& nums) {
        int n = nums.size();
        int i = n - 2;
        while (i >= 0 && nums[i] >= nums[i + 1]) {
            --i;
        }

        if (i >= 0) {
            int j = n - 1;
            while (nums[j] <= nums[i]) {
                --j;
            }
            swap(nums[i], nums[j]);
        }

        reverse(nums.begin() + i + 1, nums.end());
    }
};





####Grumpy Bookstore Owner

class Solution {
public:
    int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int minutes) {
        int n = customers.size();
        int alwaysSatisfied = 0;
        int windowGain = 0;
        int maxWindowGain = 0;

        for (int i = 0; i < n; ++i) {
            if (grumpy[i] == 0) {
                alwaysSatisfied += customers[i];
            }
        }

        for (int i = 0; i < n; ++i) {
            if (grumpy[i] == 1) {
                windowGain += customers[i];
            }

            if (i >= minutes && grumpy[i - minutes] == 1) {
                windowGain -= customers[i - minutes];
            }

            maxWindowGain = max(maxWindowGain, windowGain);
        }

        return alwaysSatisfied + maxWindowGain;
    }
};
