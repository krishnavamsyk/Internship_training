####Reverse Linked List
class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        ListNode* ptr=head;
        ListNode* prev=nullptr;
        while (ptr!=nullptr){
            ListNode* front=ptr->next;
            ptr->next=prev;
            prev=ptr;
            ptr=front;
        }
        return prev;
    }
};


####Linked List Cycle

class Solution {
public:
    bool hasCycle(ListNode *head) {
        ListNode* slow=head;
        ListNode* fast=head;
        while(fast!=NULL && fast->next!=NULL){
            slow=slow->next;
            fast=fast->next->next;
            if (slow==fast){
                return true;
            }
        }
        return false;
    }
};
